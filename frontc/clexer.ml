# 21 "clexer.mll"
 
open Cparser
exception Eof
exception InternalError of string
let version = "Clexer V1.0f 10.8.99 Hugues Cassé"


(*
** Keyword hashtable
*)
module HashString =
struct
	type t = string
	let equal (s1 : t) (s2 : t) = s1 = s2
	let hash (s : t) = Hashtbl.hash s
end
module StringHashtbl = Hashtbl.Make(HashString)
let lexicon = StringHashtbl.create 211
let init_lexicon _ =
	StringHashtbl.clear lexicon;
	List.iter
	(fun (key, token) -> StringHashtbl.add lexicon key token)
	[
		("auto", AUTO);
		("const", CONST); ("__const", CONST);
		("static", STATIC);
		("extern", EXTERN);
		("long", LONG);
		("short", SHORT);
		("register", REGISTER);
		("signed", SIGNED);
		("unsigned", UNSIGNED);
		("volatile", VOLATILE);
		("char", CHAR);
		("int", INT);
		("float", FLOAT);
		("double", DOUBLE);
		("void", VOID);
		("enum", ENUM);
		("struct", STRUCT);
		("typedef", TYPEDEF);
		("union", UNION);
		("break", BREAK);
		("continue", CONTINUE);
		("goto", GOTO);
		("return", RETURN);
		("switch", SWITCH);
		("case", CASE);
		("default", DEFAULT);
		("while", WHILE);
		("do", DO);
		("for", FOR);
		("if", IF);
		("else", ELSE);
		(*** Implementations ***)
		("__attribute__", ATTRIBUTE)
	]

let add_type name =
	StringHashtbl.add lexicon name (NAMED_TYPE name)

let context : string list list ref = ref []

let push_context _ = context := []::!context

let pop_context _ = 
	match !context with
	[] -> raise (InternalError "Empty context stack")
	| con::sub ->
		(context := sub;
		List.iter (fun name -> StringHashtbl.remove lexicon name) con)

let add_identifier name =
	match !context with
	[] -> raise (InternalError "Empty context stack")
	| con::sub ->
		(context := (name::con)::sub;
		StringHashtbl.add lexicon name (IDENT name))


(*
** Useful primitives
*)
let rem_quotes str = String.sub str 1 ((String.length str) - 2)
let scan_ident id = try StringHashtbl.find lexicon id
	with Not_found -> IDENT id
(*
** Buffer processor
*)

(*** input handle ***)
type handle =
	bool * in_channel * string * string * int * int * out_channel * string
let current_handle = ref (false, stdin, "", "", 0, 0, stdout, "")

let interactive (h : handle) = let (i, _, _, _, _, _, _, _) = h in i
let in_channel (h : handle) = let (_, c, _, _, _, _, _, _) = h in c
let line (h : handle) = let (_, _, l, _, _, _, _, _) = h in l
let buffer (h : handle) = let (_, _, _, b, _, _, _, _) = h in b
let pos (h : handle) = let (_, _, _, _, p, _, _, _) = h in p
let real_pos (i : int) (h : handle) = let (_, _, _, _, p, _, _, _) = h in i - p
let lineno (h : handle) = let (_, _, _, _, _, n, _, _) = h in n
let out_channel (h : handle) = let (_, _, _, _, _, _, out, _) = h in out
let file_name (h : handle) = let (_, _, _, _, _, _, _, name) = h in name

let set_line num =
	let (inter, cha, lin, buf, pos, _, out, name) = !current_handle in
	current_handle := (inter, cha, lin, buf, pos, num - 1, out, name)

let set_name name =
	let (inter, cha, lin, buf, pos, num, out, _) = !current_handle in
	current_handle := (inter, cha, lin, buf, pos, num, out, name)


(*** syntax error building ***)
let underline_error (buffer : string) (start : int) (stop : int) =
	let len = String.length buffer in
	let start' = max 0 start in
	let stop' = max 1 stop in
	(
		(if start' > 0 then (String.sub buffer 0 start') else "")
		^ "\027[4m"
		^ (if (stop' - start') <> 0
			then (String.sub buffer start' (stop' - start' ) )
			else ""
		)
		^ "\027[0m"
		^ (if stop' < len then (String.sub buffer stop' (len - stop') ) else "")
	)

let display_error msg token_start token_end =
	output_string (out_channel !current_handle) (
		(if (interactive !current_handle)
			then ""
			else 
				(file_name !current_handle) ^ "["
				^ (string_of_int (lineno !current_handle)) ^ "] "
		)
		^ msg ^ ": "
		^ (underline_error
				(line !current_handle)
				(real_pos token_start !current_handle)
				(real_pos token_end !current_handle)
		)
	);
	flush (out_channel !current_handle)


(*** Error handling ***)
let error msg =
	display_error msg (Parsing.symbol_start ()) (Parsing.symbol_end ());
	raise Parsing.Parse_error


(*** escape character management ***)
let scan_escape str =
	match str with
	"n" -> "\n"
	| "r" -> "\r"
	| "t" -> "\t"
	| "b" -> "\b"
	| _ -> str
let get_value chr =
	match chr with
	'0'..'9' -> (Char.code chr) - (Char.code '0')
	| 'a'..'z' -> (Char.code chr) - (Char.code 'a') + 10
	| 'A'..'Z' -> (Char.code chr) - (Char.code 'A') + 10
	| _ -> 0
let scan_hex_escape str =
	String.make 1 (Char.chr (
		(get_value (String.get str 0)) * 16
		+ (get_value (String.get str 1))
	))
let scan_oct_escape str =
	String.make 1 (Char.chr (
		(get_value (String.get str 0)) * 64
		+ (get_value (String.get str 1)) * 8
		+ (get_value (String.get str 2))
	))

# 183 "clexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\197\255\196\255\254\255\253\255\252\255\251\255\081\000\
    \119\000\003\000\079\000\080\000\085\000\098\000\031\000\102\000\
    \035\000\084\000\116\000\086\000\087\000\211\255\210\255\209\255\
    \208\255\207\255\206\255\205\255\204\255\203\255\202\255\201\255\
    \192\000\209\000\028\001\103\001\178\001\253\001\072\002\147\002\
    \222\002\103\000\245\255\251\002\250\255\232\002\005\003\237\255\
    \239\255\215\255\238\255\216\255\034\000\231\255\047\000\037\000\
    \003\000\246\255\240\255\255\255\241\255\242\255\243\255\224\255\
    \223\255\244\255\225\255\094\000\229\255\235\255\095\000\230\255\
    \236\255\232\255\034\003\044\003\073\003\107\003\115\000\116\000\
    \112\000\118\000\133\000\134\000\177\003\107\000\105\000\249\255\
    \145\003\216\003\163\000\131\000\248\003\002\004\116\000\108\000\
    \099\003\162\000\165\000\011\000\205\002\168\003\072\004\136\003\
    \021\004\031\004\095\004\161\000\127\004\152\004\040\004\052\004\
    \063\004\175\004";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\008\000\
    \008\000\027\000\028\000\029\000\033\000\034\000\035\000\036\000\
    \037\000\038\000\041\000\042\000\043\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \055\000\057\000\057\000\057\000\057\000\057\000\057\000\056\000\
    \005\000\255\255\255\255\255\255\255\255\255\255\005\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\022\000\255\255\255\255\021\000\255\255\
    \255\255\255\255\255\255\005\000\255\255\007\000\008\000\008\000\
    \008\000\007\000\007\000\007\000\006\000\006\000\006\000\255\255\
    \255\255\005\000\255\255\001\000\255\255\002\000\002\000\002\000\
    \255\255\003\000\255\255\255\255\255\255\005\000\004\000\004\000\
    \003\000\255\255\255\255\255\255\005\000\004\000\004\000\003\000\
    \255\255\255\255";
  Lexing.lex_default = 
   "\002\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\000\000\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\255\255\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\003\000\255\255\005\000\255\255\255\255\255\255\
    \005\000\098\000\098\000\003\000\044\000\006\000\255\255\255\255\
    \255\255\255\255\255\255\044\000\006\000\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\003\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\059\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\017\000\006\000\004\000\057\000\016\000\018\000\005\000\
    \028\000\029\000\014\000\012\000\031\000\013\000\032\000\015\000\
    \008\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\022\000\030\000\010\000\009\000\011\000\021\000\
    \073\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\026\000\061\000\027\000\020\000\033\000\
    \058\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\034\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\024\000\019\000\025\000\023\000\075\000\
    \066\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\070\000\071\000\068\000\067\000\063\000\
    \059\000\053\000\065\000\048\000\047\000\042\000\074\000\054\000\
    \055\000\056\000\051\000\069\000\072\000\079\000\075\000\062\000\
    \064\000\075\000\075\000\060\000\075\000\075\000\078\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\007\000\
    \007\000\050\000\059\000\075\000\075\000\074\000\074\000\087\000\
    \074\000\074\000\000\000\074\000\074\000\079\000\087\000\080\000\
    \004\000\004\000\083\000\079\000\004\000\052\000\078\000\004\000\
    \059\000\080\000\074\000\074\000\078\000\091\000\000\000\076\000\
    \000\000\000\000\049\000\000\000\000\000\074\000\000\000\087\000\
    \074\000\074\000\083\000\074\000\074\000\000\000\087\000\080\000\
    \004\000\004\000\083\000\079\000\000\000\000\000\000\000\000\000\
    \000\000\080\000\074\000\074\000\078\000\000\000\041\000\076\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\083\000\000\000\000\000\108\000\000\000\000\000\
    \001\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\000\000\000\000\000\000\000\000\
    \033\000\000\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\000\000\
    \000\000\000\000\000\000\033\000\000\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\035\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\255\255\255\255\255\255\000\000\255\255\000\000\000\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\000\000\000\000\000\000\000\000\033\000\000\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\036\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\000\000\000\000\000\000\
    \000\000\033\000\000\000\033\000\033\000\033\000\033\000\037\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \000\000\000\000\000\000\000\000\033\000\000\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\038\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\000\000\000\000\000\000\000\000\033\000\
    \000\000\033\000\033\000\033\000\033\000\033\000\039\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\000\000\059\000\
    \000\000\000\000\033\000\000\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\000\000\043\000\044\000\000\000\045\000\000\000\
    \045\000\101\000\044\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\046\000\046\000\046\000\000\000\
    \000\000\000\000\000\000\043\000\044\000\000\000\000\000\000\000\
    \000\000\000\000\044\000\044\000\000\000\088\000\000\000\088\000\
    \000\000\044\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\000\000\000\000\
    \000\000\000\000\000\000\044\000\003\000\059\000\000\000\000\000\
    \000\000\044\000\044\000\000\000\000\000\000\000\000\000\000\000\
    \044\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\003\000\000\000\097\000\000\000\000\000\
    \000\000\000\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \000\000\000\000\044\000\000\000\000\000\000\000\000\000\000\000\
    \044\000\075\000\000\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\007\000\007\000\000\000\000\000\000\000\
    \000\000\000\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \074\000\000\000\000\000\000\000\000\000\000\000\000\000\082\000\
    \105\000\105\000\105\000\105\000\105\000\105\000\105\000\105\000\
    \081\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\000\000\000\000\255\255\000\000\000\000\
    \074\000\000\000\000\000\000\000\000\000\000\000\000\000\082\000\
    \104\000\103\000\103\000\103\000\103\000\103\000\103\000\103\000\
    \081\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \000\000\000\000\000\000\000\000\000\000\086\000\000\000\000\000\
    \102\000\003\000\059\000\000\000\000\000\000\000\085\000\000\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \003\000\000\000\000\000\000\000\000\000\086\000\044\000\000\000\
    \102\000\000\000\000\000\000\000\044\000\000\000\085\000\000\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\000\000\000\000\044\000\000\000\
    \000\000\000\000\000\000\000\000\044\000\105\000\105\000\105\000\
    \105\000\105\000\105\000\105\000\105\000\000\000\095\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\094\000\
    \112\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
    \000\000\000\000\000\000\255\255\112\000\112\000\112\000\112\000\
    \112\000\112\000\112\000\112\000\000\000\000\000\095\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\094\000\
    \106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
    \106\000\106\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\106\000\106\000\106\000\106\000\106\000\106\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \255\255\106\000\106\000\106\000\106\000\106\000\106\000\111\000\
    \110\000\110\000\110\000\110\000\110\000\110\000\110\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\000\000\000\000\000\000\000\000\000\000\109\000\
    \000\000\113\000\113\000\113\000\113\000\113\000\113\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\109\000\
    \255\255\113\000\113\000\113\000\113\000\113\000\113\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\099\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\056\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\
    \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\
    \012\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\010\000\010\000\011\000\011\000\013\000\
    \015\000\017\000\012\000\019\000\020\000\041\000\007\000\052\000\
    \054\000\055\000\018\000\067\000\070\000\007\000\080\000\013\000\
    \013\000\078\000\079\000\015\000\081\000\008\000\007\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\018\000\091\000\082\000\083\000\080\000\007\000\085\000\
    \078\000\079\000\255\255\081\000\008\000\007\000\086\000\078\000\
    \094\000\095\000\081\000\008\000\097\000\017\000\007\000\098\000\
    \107\000\079\000\082\000\083\000\008\000\090\000\255\255\008\000\
    \255\255\255\255\019\000\255\255\255\255\080\000\255\255\085\000\
    \078\000\079\000\082\000\081\000\008\000\255\255\086\000\078\000\
    \094\000\095\000\081\000\008\000\255\255\255\255\255\255\255\255\
    \255\255\079\000\082\000\083\000\008\000\255\255\032\000\008\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\082\000\255\255\255\255\107\000\255\255\255\255\
    \000\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\099\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\255\255\255\255\255\255\255\255\
    \033\000\255\255\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\255\255\
    \255\255\255\255\255\255\034\000\255\255\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\107\000\097\000\090\000\255\255\098\000\255\255\255\255\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\255\255\255\255\255\255\255\255\035\000\255\255\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\255\255\255\255\255\255\
    \255\255\036\000\255\255\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \255\255\255\255\255\255\255\255\037\000\255\255\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\255\255\255\255\255\255\255\255\038\000\
    \255\255\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\255\255\100\000\
    \255\255\255\255\039\000\255\255\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\255\255\040\000\040\000\255\255\043\000\255\255\
    \043\000\100\000\040\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\046\000\046\000\046\000\255\255\
    \255\255\255\255\255\255\040\000\040\000\255\255\255\255\255\255\
    \255\255\255\255\040\000\046\000\255\255\074\000\255\255\074\000\
    \255\255\046\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\255\255\255\255\
    \255\255\255\255\255\255\046\000\096\000\096\000\255\255\255\255\
    \255\255\046\000\075\000\255\255\255\255\255\255\255\255\255\255\
    \075\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\096\000\255\255\096\000\255\255\255\255\
    \255\255\255\255\076\000\076\000\076\000\076\000\076\000\076\000\
    \255\255\255\255\075\000\255\255\255\255\255\255\255\255\255\255\
    \075\000\077\000\255\255\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\255\255\255\255\255\255\
    \255\255\255\255\076\000\076\000\076\000\076\000\076\000\076\000\
    \077\000\255\255\255\255\255\255\255\255\255\255\255\255\077\000\
    \103\000\103\000\103\000\103\000\103\000\103\000\103\000\103\000\
    \077\000\088\000\088\000\088\000\088\000\088\000\088\000\088\000\
    \088\000\088\000\088\000\255\255\255\255\100\000\255\255\255\255\
    \077\000\255\255\255\255\255\255\255\255\255\255\255\255\077\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \077\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\084\000\084\000\084\000\084\000\084\000\084\000\
    \255\255\255\255\255\255\255\255\255\255\084\000\255\255\255\255\
    \101\000\092\000\092\000\255\255\255\255\255\255\084\000\255\255\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \092\000\255\255\255\255\255\255\255\255\084\000\089\000\255\255\
    \101\000\255\255\255\255\255\255\089\000\255\255\084\000\255\255\
    \092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
    \092\000\092\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\255\255\255\255\089\000\255\255\
    \255\255\255\255\255\255\255\255\089\000\104\000\104\000\104\000\
    \104\000\104\000\104\000\104\000\104\000\255\255\093\000\105\000\
    \105\000\105\000\105\000\105\000\105\000\105\000\105\000\093\000\
    \110\000\110\000\110\000\110\000\110\000\110\000\110\000\110\000\
    \255\255\255\255\255\255\096\000\111\000\111\000\111\000\111\000\
    \111\000\111\000\111\000\111\000\255\255\255\255\093\000\112\000\
    \112\000\112\000\112\000\112\000\112\000\112\000\112\000\093\000\
    \102\000\102\000\102\000\102\000\102\000\102\000\102\000\102\000\
    \102\000\102\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\102\000\102\000\102\000\102\000\102\000\102\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
    \106\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \106\000\106\000\106\000\106\000\106\000\106\000\255\255\255\255\
    \101\000\102\000\102\000\102\000\102\000\102\000\102\000\108\000\
    \108\000\108\000\108\000\108\000\108\000\108\000\108\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \106\000\106\000\106\000\106\000\106\000\106\000\255\255\255\255\
    \109\000\109\000\109\000\109\000\109\000\109\000\109\000\109\000\
    \109\000\109\000\255\255\255\255\255\255\255\255\255\255\108\000\
    \255\255\109\000\109\000\109\000\109\000\109\000\109\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \113\000\113\000\113\000\113\000\113\000\113\000\255\255\108\000\
    \092\000\109\000\109\000\109\000\109\000\109\000\109\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \113\000\113\000\113\000\113\000\113\000\113\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\108\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec initial lexbuf =
    __ocaml_lex_initial_rec lexbuf 0
and __ocaml_lex_initial_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 231 "clexer.mll"
               (let _ = comment lexbuf in initial lexbuf)
# 622 "clexer.ml"

  | 1 ->
# 232 "clexer.mll"
            (initial lexbuf)
# 627 "clexer.ml"

  | 2 ->
# 233 "clexer.mll"
           (line lexbuf)
# 632 "clexer.ml"

  | 3 ->
# 235 "clexer.mll"
           (CST_CHAR (chr lexbuf))
# 637 "clexer.ml"

  | 4 ->
# 236 "clexer.mll"
           (CST_STRING (str lexbuf))
# 642 "clexer.ml"

  | 5 ->
# 237 "clexer.mll"
              (CST_FLOAT (Lexing.lexeme lexbuf))
# 647 "clexer.ml"

  | 6 ->
# 238 "clexer.mll"
             (CST_INT (Lexing.lexeme lexbuf))
# 652 "clexer.ml"

  | 7 ->
# 239 "clexer.mll"
             (CST_INT (Lexing.lexeme lexbuf))
# 657 "clexer.ml"

  | 8 ->
# 240 "clexer.mll"
             (CST_INT (Lexing.lexeme lexbuf))
# 662 "clexer.ml"

  | 9 ->
# 242 "clexer.mll"
               (EOF)
# 667 "clexer.ml"

  | 10 ->
# 243 "clexer.mll"
            (ELLIPSIS)
# 672 "clexer.ml"

  | 11 ->
# 244 "clexer.mll"
           (PLUS_EQ)
# 677 "clexer.ml"

  | 12 ->
# 245 "clexer.mll"
           (MINUS_EQ)
# 682 "clexer.ml"

  | 13 ->
# 246 "clexer.mll"
           (STAR_EQ)
# 687 "clexer.ml"

  | 14 ->
# 247 "clexer.mll"
           (SLASH_EQ)
# 692 "clexer.ml"

  | 15 ->
# 248 "clexer.mll"
           (PERCENT_EQ)
# 697 "clexer.ml"

  | 16 ->
# 249 "clexer.mll"
           (PIPE_EQ)
# 702 "clexer.ml"

  | 17 ->
# 250 "clexer.mll"
           (AND_EQ)
# 707 "clexer.ml"

  | 18 ->
# 251 "clexer.mll"
           (CIRC_EQ)
# 712 "clexer.ml"

  | 19 ->
# 252 "clexer.mll"
            (INF_INF_EQ)
# 717 "clexer.ml"

  | 20 ->
# 253 "clexer.mll"
            (SUP_SUP_EQ)
# 722 "clexer.ml"

  | 21 ->
# 254 "clexer.mll"
           (INF_INF)
# 727 "clexer.ml"

  | 22 ->
# 255 "clexer.mll"
           (SUP_SUP)
# 732 "clexer.ml"

  | 23 ->
# 256 "clexer.mll"
           (EQ_EQ)
# 737 "clexer.ml"

  | 24 ->
# 257 "clexer.mll"
           (EXCLAM_EQ)
# 742 "clexer.ml"

  | 25 ->
# 258 "clexer.mll"
           (INF_EQ)
# 747 "clexer.ml"

  | 26 ->
# 259 "clexer.mll"
           (SUP_EQ)
# 752 "clexer.ml"

  | 27 ->
# 260 "clexer.mll"
           (EQ)
# 757 "clexer.ml"

  | 28 ->
# 261 "clexer.mll"
           (INF)
# 762 "clexer.ml"

  | 29 ->
# 262 "clexer.mll"
           (SUP)
# 767 "clexer.ml"

  | 30 ->
# 263 "clexer.mll"
           (PLUS_PLUS)
# 772 "clexer.ml"

  | 31 ->
# 264 "clexer.mll"
           (MINUS_MINUS)
# 777 "clexer.ml"

  | 32 ->
# 265 "clexer.mll"
           (ARROW)
# 782 "clexer.ml"

  | 33 ->
# 266 "clexer.mll"
           (PLUS)
# 787 "clexer.ml"

  | 34 ->
# 267 "clexer.mll"
           (MINUS)
# 792 "clexer.ml"

  | 35 ->
# 268 "clexer.mll"
           (STAR)
# 797 "clexer.ml"

  | 36 ->
# 269 "clexer.mll"
           (SLASH)
# 802 "clexer.ml"

  | 37 ->
# 270 "clexer.mll"
           (PERCENT)
# 807 "clexer.ml"

  | 38 ->
# 271 "clexer.mll"
           (EXCLAM)
# 812 "clexer.ml"

  | 39 ->
# 272 "clexer.mll"
           (AND_AND)
# 817 "clexer.ml"

  | 40 ->
# 273 "clexer.mll"
           (PIPE_PIPE)
# 822 "clexer.ml"

  | 41 ->
# 274 "clexer.mll"
           (AND)
# 827 "clexer.ml"

  | 42 ->
# 275 "clexer.mll"
           (PIPE)
# 832 "clexer.ml"

  | 43 ->
# 276 "clexer.mll"
           (CIRC)
# 837 "clexer.ml"

  | 44 ->
# 277 "clexer.mll"
           (QUEST)
# 842 "clexer.ml"

  | 45 ->
# 278 "clexer.mll"
           (COLON)
# 847 "clexer.ml"

  | 46 ->
# 279 "clexer.mll"
           (TILDE)
# 852 "clexer.ml"

  | 47 ->
# 281 "clexer.mll"
           (LBRACE)
# 857 "clexer.ml"

  | 48 ->
# 282 "clexer.mll"
           (RBRACE)
# 862 "clexer.ml"

  | 49 ->
# 283 "clexer.mll"
           (LBRACKET)
# 867 "clexer.ml"

  | 50 ->
# 284 "clexer.mll"
           (RBRACKET)
# 872 "clexer.ml"

  | 51 ->
# 285 "clexer.mll"
           (LPAREN)
# 877 "clexer.ml"

  | 52 ->
# 286 "clexer.mll"
           (RPAREN)
# 882 "clexer.ml"

  | 53 ->
# 287 "clexer.mll"
           (SEMICOLON)
# 887 "clexer.ml"

  | 54 ->
# 288 "clexer.mll"
           (COMMA)
# 892 "clexer.ml"

  | 55 ->
# 289 "clexer.mll"
           (DOT)
# 897 "clexer.ml"

  | 56 ->
# 290 "clexer.mll"
              (SIZEOF)
# 902 "clexer.ml"

  | 57 ->
# 291 "clexer.mll"
            (scan_ident (Lexing.lexeme lexbuf))
# 907 "clexer.ml"

  | 58 ->
# 293 "clexer.mll"
           (EOF)
# 912 "clexer.ml"

  | 59 ->
# 294 "clexer.mll"
         (display_error
								"Invalid symbol"
								(Lexing.lexeme_start lexbuf)
								(Lexing.lexeme_end lexbuf);
							initial lexbuf)
# 921 "clexer.ml"

  | n -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_initial_rec lexbuf n

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 90
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 300 "clexer.mll"
               (())
# 932 "clexer.ml"

  | 1 ->
# 301 "clexer.mll"
           (comment lexbuf)
# 937 "clexer.ml"

  | n -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec lexbuf n

and line lexbuf =
    __ocaml_lex_line_rec lexbuf 92
and __ocaml_lex_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 305 "clexer.mll"
              (initial lexbuf)
# 948 "clexer.ml"

  | 1 ->
# 306 "clexer.mll"
            (line lexbuf)
# 953 "clexer.ml"

  | 2 ->
# 307 "clexer.mll"
             (set_line (int_of_string (Lexing.lexeme lexbuf));
							file lexbuf)
# 959 "clexer.ml"

  | 3 ->
# 309 "clexer.mll"
         (endline lexbuf)
# 964 "clexer.ml"

  | n -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_line_rec lexbuf n

and file lexbuf =
    __ocaml_lex_file_rec lexbuf 96
and __ocaml_lex_file_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 311 "clexer.mll"
               (initial lexbuf)
# 975 "clexer.ml"

  | 1 ->
# 312 "clexer.mll"
            (file lexbuf)
# 980 "clexer.ml"

  | 2 ->
# 313 "clexer.mll"
                     (set_name (rem_quotes (Lexing.lexeme lexbuf));
							endline lexbuf)
# 986 "clexer.ml"

  | 3 ->
# 315 "clexer.mll"
         (endline lexbuf)
# 991 "clexer.ml"

  | n -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_file_rec lexbuf n

and endline lexbuf =
    __ocaml_lex_endline_rec lexbuf 99
and __ocaml_lex_endline_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 317 "clexer.mll"
                (initial lexbuf)
# 1002 "clexer.ml"

  | 1 ->
# 318 "clexer.mll"
         (endline lexbuf)
# 1007 "clexer.ml"

  | n -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_endline_rec lexbuf n

and str lexbuf =
    __ocaml_lex_str_rec lexbuf 100
and __ocaml_lex_str_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 321 "clexer.mll"
              ("")
# 1018 "clexer.ml"

  | 1 ->
# 322 "clexer.mll"
                (let cur = scan_hex_escape (String.sub
							(Lexing.lexeme lexbuf) 2 2) in cur ^ (str lexbuf))
# 1024 "clexer.ml"

  | 2 ->
# 324 "clexer.mll"
                (let cur = scan_oct_escape (String.sub
							(Lexing.lexeme lexbuf) 1 3) in cur ^ (str lexbuf))
# 1030 "clexer.ml"

  | 3 ->
# 326 "clexer.mll"
            ((String.make 1 (Char.chr 0)) ^ (str lexbuf))
# 1035 "clexer.ml"

  | 4 ->
# 327 "clexer.mll"
             (let cur = scan_escape (String.sub
							(Lexing.lexeme lexbuf) 1 1) in cur ^ (str lexbuf))
# 1041 "clexer.ml"

  | 5 ->
# 329 "clexer.mll"
         (let cur = Lexing.lexeme lexbuf in cur ^  (str lexbuf))
# 1046 "clexer.ml"

  | n -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_str_rec lexbuf n

and chr lexbuf =
    __ocaml_lex_chr_rec lexbuf 107
and __ocaml_lex_chr_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 332 "clexer.mll"
              ("")
# 1057 "clexer.ml"

  | 1 ->
# 333 "clexer.mll"
                (let cur = scan_hex_escape (String.sub
							(Lexing.lexeme lexbuf) 2 2) in cur ^ (chr lexbuf))
# 1063 "clexer.ml"

  | 2 ->
# 335 "clexer.mll"
                (let cur = scan_oct_escape (String.sub
							(Lexing.lexeme lexbuf) 1 3) in cur ^ (chr lexbuf))
# 1069 "clexer.ml"

  | 3 ->
# 337 "clexer.mll"
            ((String.make 1 (Char.chr 0)) ^ (chr lexbuf))
# 1074 "clexer.ml"

  | 4 ->
# 338 "clexer.mll"
             (let cur = scan_escape (String.sub
							(Lexing.lexeme lexbuf) 1 1) in cur ^ (chr lexbuf))
# 1080 "clexer.ml"

  | 5 ->
# 340 "clexer.mll"
         (let cur = Lexing.lexeme lexbuf in cur ^ (chr lexbuf))
# 1085 "clexer.ml"

  | n -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_chr_rec lexbuf n

;;

# 342 "clexer.mll"
 

(*** get_buffer ***)
let get_buffer (h : handle ref) (dst : string) (len : int) : int =
	let (inter, chan, line, buffer, pos, lineno, out, name) = !h in
	try
		let (bufferp, linep, posp, linenop) =
			if buffer <> ""
			then (buffer, line , pos, lineno)
			else
				let buffer = (input_line chan) ^ "\n" in
				(
					buffer,
					(if inter then line ^ buffer else buffer),
					(if inter then pos else pos + (String.length line)),
					lineno + 1
				) in
		(*let _ = print_endline ("-->" ^ linep) in*)
		let bufl = String.length bufferp in
		let lenp = min len bufl in
		let buffers = if bufl = lenp
			then ""
			else String.sub bufferp lenp (bufl - lenp) in
		begin
			String.blit bufferp 0 dst 0 lenp;
			h := (inter, chan, linep, buffers, posp, linenop, out, name);
			lenp
		end
	with End_of_file -> 0


(* init: handle -> ()
**	Initialize lexer.
*)
let init hdl =
	init_lexicon ();
	current_handle := hdl 

# 1130 "clexer.ml"
